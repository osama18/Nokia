var LastFmSearchAdapter = {

    APP_KEY: "CqPZR4Tm7i2_S2VDDONy",

    /**
     * Without a latitude and a longitude, the place cannot be shown on the map
     * This breaks all sorts of things, and, as this is a location-aware application,
     * it can be assumed to be the product of corrupted data and should be filtered out.
     * Uses the ECMA-5 array.filter() method.
     */
    filterEvents: function(events) {
        return events.filter(function(event) {
            return (event.venue.location["geo:point"]["geo:lat"] && event.venue.location["geo:point"]["geo:long"]);
        });
    },
    /**
     * Assemble a valid URL, and send this as the first parameter of nokia.mh5.jsonp() method.
     * the second parameter to this method is the callback function.
     * We can declare this elsewhere, or we can use the fact that functions are first class in
     * javascript and send an entire anonymous function itself as the second parameter.
     * This callback function in turn takes the result set generated by the search service as
     * its parameter and handles it all in situ.
     *
     */
    search: function(query, params, callback, errback) {
        /*if (LastFmSearchAdapter.APP_KEY === "PL4G39vOuXuV3MyWWlPn0Q") {
            alert("Please use a valid Last.fm key");
            errback("Please use a valid Last.fm key")
        }*/
        var url = "http://ws.audioscrobbler.com/2.0/?" +
                  "method=artist.getevents" +
                  "&format=json" +
                  "&limit=25" +
                  "&api_key=" + LastFmSearchAdapter.APP_KEY +
                  "&artist=" +
                  encodeURIComponent(query) +
                  "&callback";

        nokia.mh5.jsonp(url, function (results){
            /**
             *
             * In case of an error, pass that error to the errback function.
             * In this case, an "error" means an error in the jsonp function itself
             * such as a timeout.
             * Or in other words, an error returned from the server might take the following form:
             * @example
             * "results": {
             *    "error":"Sorry, something went wrong"
             * }
             * Pass this string through to the errback function
             */
            if(results.error){
                errback(results.error);
            } else {
                /**
                 * The only real requirement here is to create a mapping function which puts the
                 * data returned by the search service into the format which is required by the API.
                 * The complexity of the mapping function is a product of the similarity of your data
                 * to the format required by the API.
                 * In this example, keys such as "name", "website" and "phone number" are easily accessible
                 * from the search results data format.
                 * "Latitude" and "longitude" need a bit more work
                 * and the whole "address" needs creating from several other fields
                 */
                var mapFunction = function(event) {
                    var latitude = parseFloat(event.venue.location["geo:point"]["geo:lat"]),
                        longitude = parseFloat(event.venue.location["geo:point"]["geo:long"]),
                        venue = event.venue,
                        icon = venue.image[2]["#text"],
                        name = venue.name,
                        eventImage,
                        address = [],
                        evl = venue.location;

                    /**
                     * we can't tell in advance if the search data will contain street and city details
                     * so simply concatenating strings with commas could lead to trailing commas
                     * far better is to push everything into an array and then array.join() it.
                     */
                    if (evl.street) {address.push(evl.street);}
                    if (evl.city) {address.push(evl.city);}

                    address = address.join(", ");

                    /**
                     * In this example, the results set contains multiple image resolutions.
                     * We extract the "medium" sized ones.
                     */
                    if (event.image && event.image.length > 0) {
                        var imageData = event.image.filter(function(imageData) {
                            return (imageData.size === "medium");
                        });
                        if (imageData.length > 0) {
                            eventImage = imageData[0]["#text"];
                        }
                    }
                    return {
                        eventId:            event.id,
                        headliner:          event.title,
                        hasOwnerContent:    false,
                        address:            address,
                        attendance:         event.attendance,
                        categoryIcon:       "img/marker.png",
                        eventImage:         eventImage,
                        latitude:           latitude,
                        longitude:          longitude,
                        name:               name,
                        website:            venue.website,
                        phone:              venue.phonenumber,
                        startDate:          event.startDate.split(" ").splice(0,4).join(" ") || ""
                    };
                };
                /**
                 * the API requires the results list to be an array.
                 * In this example, the search service returns a results set as an array
                 * and a single result as an object.
                 * So.. if it's a single result, put it in an array of length 1
                 */
                results = results.events && results.events.event ? [].concat(results.events.event) : [];

                /**
                 * filter the results to exclude anything without a latitude and longitude
                 */
                results = LastFmSearchAdapter.filterEvents(results);

                callback({results: results.map(mapFunction)});
            }

        });
    }
};
